name: Frontend â€” Build & Deploy

on:
  pull_request:
    branches: [ main ]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-deploy.yml"
  push:
    branches: [ staging, main ]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-deploy.yml"
  workflow_dispatch:
    inputs:
      target:
        description: "Deploy target"
        type: choice
        required: false
        default: staging
        options: [staging, prod]

env:
  STAGING_DIR: /var/www/crm_frontend/v2-staging
  PROD_DIR: /var/www/crm_frontend/v2

concurrency:
  group: frontend-deploy-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # âœ… Job para PRs (branch protection)
  lint_build:
    name: Frontend â€” Lint & Build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      # Evitamos que warnings tumben el build en CI
      - run: npm run build -- --clearScreen=false
        env:
          CI: "false"

  # ðŸš€ Deploy (push/dispatch)
  deploy:
    name: Frontend â€” Build & Deploy
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build (Vite)
        run: npm run build
        env:
          CI: "false"

      - name: Show build output
        run: ls -lah dist

      - name: Parse SSH host[:port]
        id: host
        shell: bash
        run: |
          raw="${{ secrets.SSH_HOST }}"
          if [[ -z "$raw" ]]; then
            echo "SSH_HOST secret is empty" >&2
            exit 1
          fi
          if [[ "$raw" == *:* ]]; then
            host="${raw%:*}"
            port="${raw##*:}"
          else
            host="$raw"
            port=""
          fi
          echo "host=$host" >> "$GITHUB_OUTPUT"
          echo "port=$port" >> "$GITHUB_OUTPUT"
          echo "Using host=$host port=${port:-<default 22>}"

      - name: Setup SSH key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

      - name: Add server to known_hosts
        shell: bash
        run: |
          ssh-keyscan -T 10 -H "${{ steps.host.outputs.host }}" >> ~/.ssh/known_hosts
          wc -l ~/.ssh/known_hosts

      - name: Choose deploy dir
        id: pick
        shell: bash
        run: |
          dir="${{ env.STAGING_DIR }}"
          # Push a main => prod
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "main" ]]; then
            dir="${{ env.PROD_DIR }}"
          fi
          # Dispatch con input prod => prod
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.target }}" == "prod" ]]; then
            dir="${{ env.PROD_DIR }}"
          fi
          echo "dir=$dir" >> "$GITHUB_OUTPUT"
          echo "Deploy dir: $dir"

      - name: Rsync dist â†’ server
        shell: bash
        run: |
          HOST="${{ steps.host.outputs.host }}"
          PORT="${{ steps.host.outputs.port }}"
          USER="${{ secrets.SSH_USER }}"
          if [[ -n "$PORT" ]]; then SSH_P="-p $PORT"; else SSH_P=""; fi
          rsync -av --delete ./dist/ -e "ssh $SSH_P -o StrictHostKeyChecking=yes" \
            "$USER@$HOST:${{ steps.pick.outputs.dir }}/"

      - name: Reload Nginx
        shell: bash
        run: |
          HOST="${{ steps.host.outputs.host }}"
          PORT="${{ steps.host.outputs.port }}"
          USER="${{ secrets.SSH_USER }}"
          if [[ -n "$PORT" ]]; then SSH_P="-p $PORT"; else SSH_P=""; fi
          ssh $SSH_P "$USER@$HOST" 'sudo -n /usr/sbin/nginx -t && sudo -n /usr/bin/systemctl reload nginx'
