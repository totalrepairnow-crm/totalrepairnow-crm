const express = require('express');
const router = express.Router();
const { pool } = require('../db');

// Convierte param a client_id numérico; acepta UUID (columna clients.cliente_id) o id numérico (clients.id)
async function resolveClientId(param) {
  if (/^\d+$/.test(param)) return parseInt(param, 10); // id numérico (BIGINT)

  if (/^[0-9a-fA-F-]{36}$/.test(param)) { // UUID
    const q = await pool.query('SELECT id FROM clients WHERE cliente_id = $1 LIMIT 1', [param]);
    if (q.rowCount) return q.rows[0].id;
    throw Object.assign(new Error('Cliente no encontrado'), { status: 404 });
  }

  throw Object.assign(new Error('id inválido'), { status: 400 });
}

/** GET /api/clients/:id/services */
router.get('/:id/services', async (req, res) => {
  try {
    const clientId = await resolveClientId(req.params.id);
    const { rows } = await pool.query(
      `SELECT id, client_id, service_name, description, quantity, unit_price, total, created_at, updated_at
       FROM services
       WHERE client_id = $1
       ORDER BY created_at DESC`,
      [clientId]
    );
    res.json({ items: rows });
  } catch (e) {
    const code = e.status || 500;
    if (code >= 500) console.error('services list error:', e);
    res.status(code).json({ error: e.message || 'Error interno' });
  }
});

/** POST /api/clients/:id/services  (alias ES/EN) */
router.post('/:id/services', async (req, res) => {
  try {
    const clientId = await resolveClientId(req.params.id);

    const b = req.body || {};
    const service_name = b.service_name ?? b.titulo;
    const description  = (b.description ?? b.descripcion) ?? null;
    const quantity     = Number.isFinite(+b.quantity) ? +b.quantity
                         : (Number.isFinite(+b.cantidad) ? +b.cantidad : 1);
    const unit_price   = Number.isFinite(+b.unit_price) ? +b.unit_price
                         : (Number.isFinite(+b.precio_unitario) ? +b.precio_unitario
                         : (Number.isFinite(+b.precioUnitario) ? +b.precioUnitario : 0));

    if (!service_name) return res.status(400).json({ error: 'service_name/titulo es obligatorio' });

    const { rows } = await pool.query(
      `INSERT INTO services (client_id, service_name, description, quantity, unit_price)
       VALUES ($1,$2,$3,$4,$5)
       RETURNING id, client_id, service_name, description, quantity, unit_price, total, created_at, updated_at`,
      [clientId, service_name, description, quantity, unit_price]
    );
    res.status(201).json(rows[0]);
  } catch (e) {
    const code = e.status || 500;
    if (code >= 500) console.error('services create error:', e);
    res.status(code).json({ error: e.message || 'Error interno' });
  }
});

module.exports = router;
