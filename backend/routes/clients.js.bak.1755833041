const express = require('express');
const { pool } = require('../db');
const { requireAuth } = require('../middleware/auth');

const router = express.Router();

/**
 * Normaliza columnas: mantenemos empresa/telefono/estado
 * y si existen inglesas (company_name, phone, status), se sincronizan.
 */
function mapClientRow(r) {
  const empresa = r.empresa ?? r.company_name ?? 'Sin nombre';
  const telefono = r.telefono ?? r.phone ?? null;
  const estado = r.estado ?? r.status ?? 'activo';
  return {
    id: r.id?.toString?.() ?? r.id,
    cliente_id: r.cliente_id, // uuid estable para matching 1:N
    empresa,
    email: r.email,
    telefono,
    estado,
    last_contact_at: r.last_contact_at,
    created_at: r.created_at,
    updated_at: r.updated_at
  };
}

// GET /api/clients?page=&pageSize=&q=&status=
router.get('/', requireAuth, async (req, res) => {
  try {
    const page = Math.max(parseInt(req.query.page || '1', 10), 1);
    const pageSize = Math.min(Math.max(parseInt(req.query.pageSize || '10', 10), 1), 100);
    const q = (req.query.q || '').trim();
    const status = (req.query.status || '').trim();

    const params = [];
    const where = [];

    if (q) {
      params.push(`%${q.toLowerCase()}%`);
      where.push('(LOWER(empresa) LIKE $' + params.length + ' OR LOWER(email) LIKE $' + params.length + ')');
    }
    if (status) {
      params.push(status.toLowerCase());
      where.push('LOWER(estado) = $' + params.length);
    }

    const whereSQL = where.length ? `WHERE ${where.join(' AND ')}` : '';
    const offset = (page - 1) * pageSize;

    const totalSql = `SELECT COUNT(*)::int AS total FROM clients ${whereSQL}`;
    const listSql = `
      SELECT id, cliente_id, empresa, email, telefono, estado, last_contact_at, created_at, updated_at,
             company_name, phone, status
      FROM clients
      ${whereSQL}
      ORDER BY updated_at DESC
      LIMIT $${params.length + 1} OFFSET $${params.length + 2}
    `;

    const totalRes = await pool.query(totalSql, params);
    const total = totalRes.rows[0]?.total || 0;

    const listParams = params.slice();
    listParams.push(pageSize, offset);

    const listRes = await pool.query(listSql, listParams);
    const items = listRes.rows.map(mapClientRow);

    res.json({ page, pageSize, total, items });
  } catch (e) {
    console.error('clients list error:', e.message);
    res.status(500).json({ error: 'Error interno' });
  }
});

// POST /api/clients
router.post('/', requireAuth, async (req, res) => {
  try {
    const { empresa, email = null, telefono = null, estado = 'activo', last_contact_at = null } = req.body || {};
    if (!empresa || typeof empresa !== 'string') {
      return res.status(400).json({ error: 'empresa es obligatoria' });
    }
    const sql = `
      INSERT INTO clients (empresa, email, telefono, estado, last_contact_at)
      VALUES ($1,$2,$3,$4,$5)
      RETURNING id, cliente_id, empresa, email, telefono, estado, last_contact_at, created_at, updated_at,
                company_name, phone, status
    `;
    const vals = [empresa, email, telefono, estado, last_contact_at];
    const r = await pool.query(sql, vals);
    res.status(201).json(mapClientRow(r.rows[0]));
  } catch (e) {
    console.error('clients create error:', e.message);
    res.status(500).json({ error: 'Error interno' });
  }
});

// GET /api/clients/:id/services
router.get('/:id/services', requireAuth, async (req, res) => {
  try {
    const id = req.params.id;
    // id puede ser bigint serial o uuid cliente_id; resolvemos ambos
    let where = 'client_id = $1';
    let pid = id;

    // Si llega un id numÃ©rico (id bigint), buscamos su cliente_id
    if (/^\d+$/.test(id)) {
      const c = await pool.query('SELECT cliente_id FROM clients WHERE id = $1', [id]);
      if (!c.rowCount) return res.status(404).json({ error: 'Cliente no encontrado' });
      pid = c.rows[0].cliente_id;
    }

    const r = await pool.query(
      `SELECT id, client_id, descripcion, cantidad, precio_unitario, total, created_at, updated_at
       FROM services WHERE ${where} ORDER BY created_at DESC`, [pid]
    );
    res.json({ items: r.rows });
  } catch (e) {
    console.error('services list error:', e.message);
    res.status(500).json({ error: 'Error interno' });
  }
});

// POST /api/clients/:id/services  { descripcion, cantidad, precio_unitario }
router.post('/:id/services', requireAuth, async (req, res) => {
  try {
    const id = req.params.id;
    const { descripcion, cantidad = 1, precio_unitario = 0 } = req.body || {};
    if (!descripcion) return res.status(400).json({ error: 'descripcion es obligatoria' });

    let client_uuid = id;
    if (/^\d+$/.test(id)) {
      const c = await pool.query('SELECT cliente_id FROM clients WHERE id = $1', [id]);
      if (!c.rowCount) return res.status(404).json({ error: 'Cliente no encontrado' });
      client_uuid = c.rows[0].cliente_id;
    }

    const sql = `
      INSERT INTO services (client_id, descripcion, cantidad, precio_unitario)
      VALUES ($1,$2,$3,$4)
      RETURNING id, client_id, descripcion, cantidad, precio_unitario, total, created_at, updated_at
    `;
    const vals = [client_uuid, descripcion, cantidad, precio_unitario];
    const r = await pool.query(sql, vals);
    res.status(201).json(r.rows[0]);
  } catch (e) {
    console.error('services create error:', e.message);
    res.status(500).json({ error: 'Error interno' });
  }
});

module.exports = router;

