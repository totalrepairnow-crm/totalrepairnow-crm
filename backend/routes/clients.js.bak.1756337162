const express = require('express');
const router = express.Router();
const { pool } = require('../db');
const { requireAuth } = require('../middleware/auth');
const { requireRole } = require('../middleware/roles');

// Helper: entero seguro
function toInt(v, def) {
  const n = parseInt(v, 10);
  return Number.isFinite(n) ? n : def;
}

// Normaliza y valida payload de cliente
function normalizeClientBody(body = {}) {
  let empresa = body.empresa != null ? String(body.empresa).trim() : undefined;
  let email   = body.email   != null ? String(body.email).trim()   : undefined;
  let telefono= body.telefono!= null ? String(body.telefono).trim(): undefined;
  let estado  = body.estado  != null ? String(body.estado).trim().toLowerCase() : undefined;

  // Para creación, empresa es obligatoria
  if (body._requireEmpresa && !empresa) {
    const err = new Error('empresa requerida');
    err.status = 400; throw err;
  }

  if (estado && !['activo','inactivo'].includes(estado)) {
    const err = new Error('estado inválido');
    err.status = 400; throw err;
  }
  return { empresa, email, telefono, estado };
}

/**
 * GET /api/clients
 * Lista con búsqueda (q en empresa/email) y paginación
 * Roles: admin, tech
 */
router.get('/', requireAuth, requireRole(['admin','tech']), async (req, res) => {
  try {
    const page = Math.max(1, toInt(req.query.page, 1));
    const pageSize = Math.min(100, Math.max(1, toInt(req.query.pageSize, 20)));
    const q = (req.query.q || '').trim();

    const params = [];
    let where = '';
    if (q) {
      // Usamos dos parámetros para reutilizar en empresa y email
      params.push(`%${q.toLowerCase()}%`);
      params.push(`%${q.toLowerCase()}%`);
      where = `WHERE LOWER(empresa) LIKE $1 OR LOWER(email) LIKE $2`;
    }

    // total
    const totalSql = `SELECT COUNT(*)::int AS n FROM clients ${where}`;
    const total = (await pool.query(totalSql, params)).rows[0].n;

    // lista
    const offset = (page - 1) * pageSize;
    const limitIdx = params.length + 1;
    const offsetIdx = params.length + 2;
    const listSql = `
      SELECT id, cliente_id, empresa, email, telefono, estado,
             last_contact_at, created_at, updated_at
      FROM clients
      ${where}
      ORDER BY created_at DESC
      LIMIT $${limitIdx} OFFSET $${offsetIdx}
    `;
    const items = (await pool.query(listSql, [...params, pageSize, offset])).rows;

    res.json({ items, page, pageSize, total });
  } catch (e) {
    console.error('clients list error:', e);
    res.status(e.status || 500).json({ error: e.message || 'Error interno' });
  }
});

/**
 * GET /api/clients/:id
 * Obtiene por id numérico o cliente_id (UUID)
 * Roles: admin, tech
 */
router.get('/:id', requireAuth, requireRole(['admin','tech']), async (req, res) => {
  try {
    const id = String(req.params.id);
    const isNum = /^\d+$/.test(id);
    const where = isNum ? 'id = $1' : 'cliente_id = $1';
    const { rows } = await pool.query(
      `SELECT id, cliente_id, empresa, email, telefono, estado,
              last_contact_at, created_at, updated_at
       FROM clients
       WHERE ${where}
       LIMIT 1`, [id]
    );
    if (!rows.length) return res.status(404).json({ error: 'No encontrado' });
    res.json(rows[0]);
  } catch (e) {
    console.error('clients get error:', e);
    res.status(e.status || 500).json({ error: e.message || 'Error interno' });
  }
});

/**
 * POST /api/clients
 * Crea cliente
 * Rol: admin
 */
router.post('/', requireAuth, requireRole(['admin']), async (req, res) => {
  try {
    const data = normalizeClientBody({ ...req.body, _requireEmpresa: true });
    const sql = `
      INSERT INTO clients (empresa, email, telefono, estado)
      VALUES ($1, $2, $3, $4)
      RETURNING id, cliente_id, empresa, email, telefono, estado,
                last_contact_at, created_at, updated_at
    `;
    const { rows } = await pool.query(sql, [
      data.empresa, data.email || null, data.telefono || null, data.estado || 'activo'
    ]);
    res.status(201).json(rows[0]);
  } catch (e) {
    console.error('clients create error:', e);
    res.status(e.status || 500).json({ error: e.message || 'Error interno' });
  }
});

/**
 * PUT /api/clients/:id
 * Actualiza empresa/email/telefono/estado
 * Rol: admin
 */
router.put('/:id', requireAuth, requireRole(['admin']), async (req, res) => {
  try {
    const id = String(req.params.id);
    const isNum = /^\d+$/.test(id);
    const keyCol = isNum ? 'id' : 'cliente_id';

    const data = normalizeClientBody(req.body);

    const { rowCount, rows } = await pool.query(
      `
      UPDATE clients
      SET empresa  = COALESCE($1, empresa),
          email    = COALESCE($2, email),
          telefono = COALESCE($3, telefono),
          estado   = COALESCE($4, estado),
          updated_at = NOW()
      WHERE ${keyCol} = $5
      RETURNING id, cliente_id, empresa, email, telefono, estado,
                last_contact_at, created_at, updated_at
      `,
      [
        data.empresa || null,
        data.email || null,
        data.telefono || null,
        data.estado || null,
        id
      ]
    );
    if (!rowCount) return res.status(404).json({ error: 'No encontrado' });
    res.json(rows[0]);
  } catch (e) {
    console.error('clients update error:', e);
    res.status(e.status || 500).json({ error: e.message || 'Error interno' });
  }
});

module.exports = router;
