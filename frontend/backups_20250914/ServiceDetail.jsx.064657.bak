// src/pages/ServiceDetail.jsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import * as API from "../lib/api";

function fmtMoney(n) {
  const v = Number(n || 0);
  return v.toLocaleString("en-US", { style: "currency", currency: "USD" });
}

export default function ServiceDetail() {
  const { id } = useParams();
  const nav = useNavigate();

  const [svc, setSvc] = useState(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");

  // Opcionales: descuento/impuesto por si quieres ajustarlos en este flujo
  const [discount, setDiscount] = useState(0);
  const [tax, setTax] = useState(0);

  const [creating, setCreating] = useState(false);

  useEffect(() => {
    let alive = true;
    (async () => {
      setLoading(true);
      setErr("");
      try {
        const data = await API.getService(id);
        if (alive) setSvc(data);
      } catch (e) {
        if (alive) setErr(e.message || "Error");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [id]);

  async function openPdfInternal(invoiceId) {
    // Reutilizamos el fetch con Authorization y aceptando PDF
    const resp = await API.apiFetch(`/invoices/${invoiceId}/pdf?engine=internal`, {
      headers: { Accept: "application/pdf" },
    });
    if (!resp.ok) {
      const t = await resp.text().catch(() => "");
      throw new Error(t || `HTTP ${resp.status}`);
    }
    const blob = await resp.blob();
    const url = URL.createObjectURL(blob);
    window.open(url, "_blank");
  }

  async function handleCreateInvoice() {
    if (!svc) return;
    setCreating(true);
    setErr("");
    try {
      const payload = {
        client_id: svc.client_id,
        service_ids: [Number(svc.id)],
        discount: Number(discount) || 0,
        tax: Number(tax) || 0,
      };
      const res = await API.createInvoiceFromServices(payload); // { id, invoice_no }
      if (!res?.id) throw new Error("Sin id de factura");
      await openPdfInternal(res.id);
    } catch (e) {
      setErr(e.message || "No se pudo crear/abrir la factura");
    } finally {
      setCreating(false);
    }
  }

  const canInvoice = !!svc; // si luego quieres filtrar por status facturable, ajusta aquí

  return (
    <div className="container py-5">
      <div className="flex items-center gap-2 mb-3">
        <button className="btn" onClick={() => nav(-1)}>&larr; Back to Client</button>
        {canInvoice && (
          <div className="ml-auto flex items-center gap-2">
            <input
              type="number"
              min="0"
              step="0.01"
              value={discount}
              onChange={(e) => setDiscount(e.target.value)}
              className="input w-28"
              placeholder="Discount"
              title="Discount (amount)"
            />
            <input
              type="number"
              min="0"
              step="0.01"
              value={tax}
              onChange={(e) => setTax(e.target.value)}
              className="input w-24"
              placeholder="Tax %"
              title="Tax (%)"
            />
            <button
              className="btn primary"
              onClick={handleCreateInvoice}
              disabled={!canInvoice || creating}
            >
              {creating ? "Creating…" : "Invoice PDF"}
            </button>
          </div>
        )}
      </div>

      {err && <div className="alert error mb-3">{err}</div>}

      {loading && <div>Loading…</div>}
      {!loading && !svc && <div>Service not found.</div>}

      {svc && (
        <div className="card p-4">
          <h2 className="mb-2">
            <strong>WO-{svc.id}</strong>
            {svc.description ? ` — ${svc.description}` : ""}
          </h2>

          <div className="mt-2">
            <p><strong>Client:</strong> #{svc.client_id}</p>
            <p><strong>Qty:</strong> {svc.quantity ?? 1}</p>
            <p><strong>Unit Price:</strong> {fmtMoney(svc.unit_price ?? 0)}</p>
            <p><strong>Total:</strong> {fmtMoney(svc.total ?? (Number(svc.quantity || 1) * Number(svc.unit_price || 0)))}</p>
            <p><strong>Status:</strong> {svc.status || "—"}</p>
          </div>
        </div>
      )}
    </div>
  );
}
