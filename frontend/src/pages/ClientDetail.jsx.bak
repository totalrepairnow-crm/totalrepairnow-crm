import React, { useEffect, useState, useRef } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import ClientServices from "../components/ClientServices";

export default function ClientDetail() {
  const { id } = useParams(); // puede ser numérico o UUID
  const navigate = useNavigate();

  const [client, setClient] = useState(null);
  const [uploads, setUploads] = useState([]);
  const [loadingClient, setLoadingClient] = useState(true);
  const [loadingUploads, setLoadingUploads] = useState(true);
  const [msg, setMsg] = useState("");
  const [err, setErr] = useState("");
  const [upLoading, setUpLoading] = useState(false);

  const fileInputRef = useRef(null);
  const token = (typeof window !== "undefined" && localStorage.getItem("token")) || null;

  const authHeaders = () =>
    token
      ? {
          Authorization: `Bearer ${token}`,
        }
      : {};

  async function loadClient() {
    setLoadingClient(true);
    setErr("");
    try {
      const r = await fetch(`/api/clients/${id}`, { headers: { ...authHeaders() } });
      if (r.status === 401) return navigate("/login", { replace: true });
      if (!r.ok) throw new Error(`HTTP ${r.status}`);
      const data = await r.json();
      setClient(data);
    } catch (e) {
      console.error("client load error:", e);
      setErr("No se pudo cargar el cliente");
    } finally {
      setLoadingClient(false);
    }
  }

  async function loadUploads() {
    setLoadingUploads(true);
    try {
      const r = await fetch(`/api/clients/${id}/uploads`, { headers: { ...authHeaders() } });
      if (r.status === 401) return navigate("/login", { replace: true });
      if (!r.ok) throw new Error(`HTTP ${r.status}`);
      const data = await r.json();
      setUploads(data.items || []);
    } catch (e) {
      console.error("uploads load error:", e);
    } finally {
      setLoadingUploads(false);
    }
  }

  async function handleUpload(e) {
    e.preventDefault();
    setMsg("");
    setErr("");
    const files = fileInputRef.current?.files;
    if (!files || !files.length) return setMsg("Selecciona uno o más archivos");

    try {
      setUpLoading(true);
      const fd = new FormData();
      // el backend espera el campo "files"
      for (const f of files) fd.append("files", f);

      const r = await fetch(`/api/clients/${id}/uploads`, {
        method: "POST",
        headers: { ...authHeaders() }, // NO pongas Content-Type con FormData
        body: fd,
      });
      if (r.status === 401) return navigate("/login", { replace: true });
      if (!r.ok) {
        let be = null;
        try { be = await r.json(); } catch {}
        throw new Error(be?.error || `HTTP ${r.status}`);
      }
      setMsg("Archivos subidos");
      fileInputRef.current.value = null;
      await loadUploads();
    } catch (e) {
      console.error("upload error:", e);
      setErr(e.message || "Error al subir");
    } finally {
      setUpLoading(false);
    }
  }

  useEffect(() => {
    loadClient();
    loadUploads();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  return (
    <div className="container">
      <div className="dash-head">
        <h1 className="dash-title">Cliente #{id}</h1>
        <div className="spacer" />
        <Link className="btn" to="/clients">Volver a clientes</Link>
        {client?.id && (
          <Link className="btn primary" to={`/clients/${client.id}/edit`}>
            Editar
          </Link>
        )}
      </div>

      {err && <div className="alert error">{err}</div>}
      {msg && <div className="alert">{msg}</div>}

      {/* Datos del cliente */}
      <section className="card">
        <div className="card-head">
          <h3>Datos del cliente</h3>
        </div>
        {loadingClient ? (
          <div className="skel" />
        ) : client ? (
          <div className="grid grid-2">
            <div><b>Empresa:</b> {client.empresa}</div>
            <div><b>Email:</b> {client.email || "—"}</div>
            <div><b>Teléfono:</b> {client.telefono || "—"}</div>
            <div><b>Estado:</b> {client.estado}</div>
            <div><b>Creado:</b> {fmtDate(client.created_at)}</div>
            <div><b>Actualizado:</b> {fmtDate(client.updated_at)}</div>
          </div>
        ) : (
          <div className="empty">No encontrado</div>
        )}
      </section>

      {/* Galería y subida de fotos */}
      <section className="card">
        <div className="card-head">
          <h3>Fotos</h3>
        </div>

        <form onSubmit={handleUpload} className="row" style={{ gap: 8 }}>
          <input type="file" ref={fileInputRef} multiple />
          <button className="btn primary" type="submit" disabled={upLoading}>
            {upLoading ? "Subiendo..." : "Subir"}
          </button>
        </form>

        {loadingUploads ? (
          <div className="skel" />
        ) : (
          <div className="gallery" style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(160px,1fr))", gap: 12, marginTop: 12 }}>
            {uploads.length === 0 && <div className="empty">Sin archivos</div>}
            {uploads.map((u, i) => (
              <a key={i} href={u.url} target="_blank" rel="noreferrer" className="thumb" style={{ display: "block", border: "1px solid #e5e7eb", borderRadius: 8, padding: 6 }}>
                {/* si es imagen se ve, si no, sólo el nombre */}
                {/\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(u.name) ? (
                  <img src={u.url} alt={u.name} loading="lazy" style={{ width: "100%", height: 120, objectFit: "cover", borderRadius: 6 }} />
                ) : (
                  <div style={{ height: 120, display: "grid", placeItems: "center", background: "#f3f4f6", borderRadius: 6 }}>
                    <span>{u.name}</span>
                  </div>
                )}
                <div style={{ fontSize: 12, marginTop: 6, whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis" }}>
                  {u.name}
                </div>
              </a>
            ))}
          </div>
        )}
      </section>

      {/* Servicios del cliente */}
      <section className="card">
        <div className="card-head">
          <h3>Servicios</h3>
        </div>
        <ClientServices clientId={id} />
      </section>
    </div>
  );
}

function fmtDate(s) {
  if (!s) return "—";
  try {
    const d = new Date(s);
    return d.toLocaleString();
  } catch {
    return s;
  }
}

