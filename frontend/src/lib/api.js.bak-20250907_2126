// src/lib/api.js — versión saneada y SIN duplicados
const API_BASE = import.meta.env.VITE_API_BASE || '/api';

/* ----------------- Auth helpers ----------------- */
export function getToken() {
  return (
    localStorage.getItem('accessToken') ||
    localStorage.getItem('token') ||
    localStorage.getItem('access_token') ||
    ''
  );
}
export function setToken(token) {
  if (token) localStorage.setItem('accessToken', token);
}
export function clearToken() {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('token');
  localStorage.removeItem('access_token');
}
export function getRole() {
  const t = getToken();
  if (!t) return 'user';
  try {
    const base64 = t.split('.')[1]?.replace(/-/g, '+').replace(/_/g, '/');
    if (!base64) return 'user';
    const json = JSON.parse(atob(base64));
    return json.role || 'user';
  } catch {
    return 'user';
  }
}

/* ----------------- apiFetch ----------------- */
export async function apiFetch(path, opts = {}) {
  const headers = { 'Content-Type': 'application/json', ...(opts.headers || {}) };
  const t = getToken();
  if (t) headers.Authorization = `Bearer ${t}`;

  const res = await fetch(`${API_BASE}${path}`, { ...opts, headers });
  if (!res.ok) {
    let msg = `HTTP ${res.status}`;
    try {
      const err = await res.json();
      msg = err?.error || JSON.stringify(err);
    } catch {}
    throw new Error(msg);
  }
  const ct = res.headers.get('content-type') || '';
  return ct.includes('application/json') ? res.json() : res.text();
}

/* ----------------- Auth API ----------------- */
export async function login(email, password) {
  const data = await apiFetch('/login', {
    method: 'POST',
    body: JSON.stringify({ email, password }),
  });
  const t = data?.accessToken || data?.token;
  if (t) setToken(t);
  return data;
}

/* ----------------- Dashboard ----------------- */
export async function getDashboard() {
  try {
    const data = await apiFetch('/dashboard');
    if (data?.totals && data?.series) return data;
  } catch (e) {
    // swallow y devolvemos fallback
  }
  return {
    totals: { clients: 0, users: 0, services: 0 },
    series: { servicesPerWeek: [] },
  };
}

/* ----------------- Clients ----------------- */
export async function listClients({ q = '', page = 1, limit = 10 } = {}) {
  const params = new URLSearchParams();
  if (q) params.set('q', q);
  params.set('page', String(page));
  params.set('limit', String(limit));
  return apiFetch(`/clients?${params.toString()}`);
}
export async function getClient(id) {
  return apiFetch(`/clients/${id}`);
}
export async function createClient(payload) {
  return apiFetch('/clients', {
    method: 'POST',
    body: JSON.stringify(payload),
  });
}

/* ----------------- Users ----------------- */
export async function listUsers() {
  return apiFetch('/users');
}

/* ----------------- Services ----------------- */
export async function listServices({ q = '', page = 1, limit = 10 } = {}) {
  const params = new URLSearchParams();
  if (q) params.set('q', q);
  params.set('page', String(page));
  params.set('limit', String(limit));
  return apiFetch(`/services?${params.toString()}`);
}

export async function getService(id) {
  return apiFetch(`/services/${id}`);
}

// Nota: el backend puede no tener aún estos endpoints; se incluyen
// para que el build no falle si se importan desde el UI.
export async function createService(payload) {
  return apiFetch('/services', {
    method: 'POST',
    body: JSON.stringify(payload),
  });
}
export async function updateService(id, payload) {
  return apiFetch(`/services/${id}`, {
    method: 'PUT',
    body: JSON.stringify(payload),
  });
}
export async function deleteService(id) {
  return apiFetch(`/services/${id}`, { method: 'DELETE' });
}
