import './styles/theme.css';           // primero tema (oscuro)
import './styles/app.css';             // luego estilos app
import './styles/white-override.css';  // al final: override variables
// Si ya no usas overrides, puedes quitar la línea siguiente:
import './styles/white-override.css';

import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

// Montaje único de la app
const rootEl = document.getElementById('root');
const root = createRoot(rootEl);
root.render(<App />);

// Guardia: forzar blanco en runtime (incluye shorthand)
(function enforceWhiteBgUltimate() {
  try {
    const setAll = (el) => {
      if (!el) return;
      el.style.setProperty('background', '#fff', 'important');
      el.style.setProperty('background-color', '#fff', 'important');
      el.style.setProperty('background-image', 'none', 'important');
    };

    // 1) <style> auxiliar por si se borran inline styles
    const id = 'white-bg-guard-ultimate';
    if (!document.getElementById(id)) {
      const style = document.createElement('style');
      style.id = id;
      style.textContent =
        'html,body,#root{background:#fff !important;background-color:#fff !important;background-image:none !important;}';
      document.head.appendChild(style);
    }

    // 2) Aplica inline + observa cambios para re-aplicar si intentan volver a oscuro
    const html = document.documentElement;
    const body = document.body;
    const rootEl = document.getElementById('root');
    setAll(html); setAll(body); setAll(rootEl);

    const reapply = () => { setAll(html); setAll(document.body); setAll(document.getElementById('root')); };
    const mo1 = new MutationObserver(reapply);
    const mo2 = new MutationObserver(reapply);
    mo1.observe(document.documentElement, { attributes: true, attributeFilter: ['class','style'] });
    if (document.body) mo2.observe(document.body, { attributes: true, attributeFilter: ['class','style'] });

    // 3) Quita señales de tema oscuro en <html>
    html.classList.remove('dark');
    html.removeAttribute('data-theme');
  } catch {}
})();


import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(<App />);



// --- Guardia de fondo blanco (prioridad máxima) ---
(function enforceWhiteBg() {
  try {
    // 1) <style> con !important (gana a CSS externos)
    const id = 'white-bg-guard-runtime';
    if (!document.getElementById(id)) {
      const style = document.createElement('style');
      style.id = id;
      style.textContent =
        'html, body, #root { background-color:#fff !important; background-image:none !important; }';
      document.head.appendChild(style);
    }

    // 2) Quita señales de modo oscuro si las hubiera
    document.documentElement.classList.remove('dark');
    document.documentElement.removeAttribute('data-theme');

    // 3) Refuerza inline (aún más prioridad)
    document.documentElement.style.backgroundColor = '#fff';
    if (document.body) document.body.style.backgroundColor = '#fff';
    const rootEl = document.getElementById('root');
    if (rootEl) rootEl.style.backgroundColor = '#fff';

    // 4) Si algo vuelve a poner oscuro, lo re-forzamos
    const reapply = () => {
      document.documentElement.style.backgroundColor = '#fff';
      if (document.body) document.body.style.backgroundColor = '#fff';
      const r = document.getElementById('root');
      if (r) r.style.backgroundColor = '#fff';
    };
    const mo = new MutationObserver(reapply);
    if (document.body) mo.observe(document.body, { attributes: true, attributeFilter: ['class', 'style'] });
    mo.observe(document.documentElement, { attributes: true, attributeFilter: ['class', 'style'] });
  } catch (_) {
    // no-op
  }
})();
// --- Fin guardia ---

const root = createRoot(document.getElementById('root'));
root.render(<App />);

