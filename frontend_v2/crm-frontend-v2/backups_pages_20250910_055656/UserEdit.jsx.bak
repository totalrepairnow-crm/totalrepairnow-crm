// src/pages/UserEdit.jsx
import React, { useEffect, useState } from "react";
import { useNavigate, useParams, Link } from "react-router-dom";
import { getUser, updateUser, deleteUser } from "../lib/api";

export default function UserEdit() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [removing, setRemoving] = useState(false);
  const [form, setForm] = useState({
    first_name: "",
    last_name: "",
    email: "",
    phone: "",
    role: "client",
  });
  const [error, setError] = useState("");

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const u = await getUser(id);
        if (!alive) return;
        setForm({
          first_name: u.first_name || "",
          last_name:  u.last_name  || "",
          email:      u.email      || "",
          phone:      u.phone      || "",
          role:       u.role       || "client",
        });
      } catch (e) {
        console.error(e);
        setError("No se pudo cargar el usuario.");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, [id]);

  const onChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const onSubmit = async (e) => {
    e.preventDefault();
    try {
      setSaving(true);
      await updateUser(id, {
        first_name: form.first_name?.trim() || null,
        last_name:  form.last_name?.trim()  || null,
        email:      form.email?.trim()      || null,
        phone:      form.phone?.trim()      || null,
        role:       form.role,
      });
      navigate(`/users/${id}`); // volver al detalle
    } catch (err) {
      console.error(err);
      setError("No se pudo guardar. Revisa los datos.");
    } finally {
      setSaving(false);
    }
  };

  const onDelete = async () => {
    if (!confirm("¿Eliminar este usuario? Esta acción no se puede deshacer.")) return;
    try {
      setRemoving(true);
      await deleteUser(id);
      navigate("/users");
    } catch (err) {
      console.error(err);
      alert("No se pudo eliminar.");
    } finally {
      setRemoving(false);
    }
  };

  return (
    <div className="page">
      <div className="container">
        {/* Header / Toolbar: igual a ClientEdit */}
        <div className="content-card">
          <div className="card-header">
            <div className="title-wrap">
              <h1 className="page-title">Edit User</h1>
              <div className="subtitle muted">User #{id}</div>
            </div>
            <div className="actions">
              <Link className="btn" to={`/users/${id}`}>Back</Link>
              <button className="btn danger" onClick={onDelete} disabled={removing || loading}>
                {removing ? "Deleting…" : "Delete"}
              </button>
            </div>
          </div>

          <div className="card-body">
            {error && <div className="alert error">{error}</div>}
            {loading ? (
              <div className="muted">Loading…</div>
            ) : (
              <form onSubmit={onSubmit} className="form-grid">
                <div className="form-row">
                  <div className="form-field">
                    <label>First name</label>
                    <input
                      name="first_name"
                      value={form.first_name}
                      onChange={onChange}
                      placeholder="John"
                    />
                  </div>
                  <div className="form-field">
                    <label>Last name</label>
                    <input
                      name="last_name"
                      value={form.last_name}
                      onChange={onChange}
                      placeholder="Doe"
                    />
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-field">
                    <label>Email</label>
                    <input
                      type="email"
                      name="email"
                      value={form.email}
                      onChange={onChange}
                      placeholder="user@example.com"
                      required
                    />
                  </div>
                  <div className="form-field">
                    <label>Phone</label>
                    <input
                      name="phone"
                      value={form.phone}
                      onChange={onChange}
                      placeholder="555-1234"
                    />
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-field">
                    <label>Role</label>
                    <select name="role" value={form.role} onChange={onChange}>
                      <option value="admin">admin</option>
                      <option value="tech">tech</option>
                      <option value="client">client</option>
                    </select>
                  </div>
                  <div className="form-field"></div>
                </div>

                <div className="form-actions" style={{ justifyContent: "flex-end", gap: 12 }}>
                  <Link className="btn" to={`/users/${id}`}>Cancel</Link>
                  <button className="btn primary" type="submit" disabled={saving}>
                    {saving ? "Saving…" : "Save changes"}
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
